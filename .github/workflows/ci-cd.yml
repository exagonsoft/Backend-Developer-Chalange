name: CI/CD Pipeline

# Run the entire workflow only when pushing to the master branch
on:
  push:
    branches:
      - master  # Run the workflow only when pushing to the `master` branch

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Set Environment Variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

      - name: Run Tests
        run: npm run test

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test  # Ensure it runs only after `build-and-test` completes successfully

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/vehicle-service:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/vehicle-service:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build  # Ensure it runs only after `docker-build` completes successfully

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no user@your_server_ip_address << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/vehicle-service:latest
            docker stop vehicle-service || true
            docker rm vehicle-service || true
            docker run -d --name vehicle-service -p 4000:4000 --env-file /path/to/your/.env ${{ secrets.DOCKER_USERNAME }}/vehicle-service:latest
          EOF
